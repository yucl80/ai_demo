{
    "global_overview": "Provide a high-level overview of this entire codebase, including main modules and their purposes.",
    "segment_analysis": "Analyze the following {segment_type} '{segment_name}' in the context of the entire codebase.\n\nGlobal context:\n{global_context}\n\nSegment context:\n{segment_context}\n\nCode:\n{segment_code}\n\nProvide a detailed analysis, including:\n1. The purpose and functionality of this {segment_type}.\n2. How it relates to other parts of the codebase.\n3. Any potential improvements or optimizations.\n4. Possible edge cases or error scenarios to consider.",
    "summary_analysis": "Based on the following detailed analyses of code segments and the global context, provide a comprehensive summary of the entire codebase. Include insights on:\n1. Overall architecture and design patterns\n2. Key components and their interactions\n3. Potential areas for improvement or optimization\n4. Any notable strengths or weaknesses in the code structure\n\nGlobal context:\n{global_context}\n\nDetailed analyses:\n{detailed_analyses}",
    "interactive_query": "Based on the following context about a codebase, please answer this question:\n\nCode overview: {overview}\n\nDetailed analyses: {detailed_analyses}\n\nSummary: {summary}\n\nQuestion: {query}\n\nProvide a detailed and insightful answer, drawing from the provided context and your general knowledge of software development best practices.",
    "enhanced_analysis": "Based on the provided enhanced context, perform a comprehensive analysis of the code. Consider all aspects including AST structure, version control history, code quality, test coverage, dependencies, design patterns, performance, security, domain-specific insights, comments and documentation, metaprogramming techniques, and environmental factors. Provide a detailed report that covers:\n 1. Overall code structure and architecture\n2. Code quality and maintainability\n3. Performance characteristics and potential optimizations\n4. Security vulnerabilities and best practices\n    5. Test coverage and reliability\n 6. Design patterns and architectural decisions\n 7. Domain-specific insights and recommendations\n  8. Documentation quality and completeness\n 9. Advanced language features and metaprogramming usage\n  10. Environmental dependencies and configuration\n\n Highlight key strengths, potential issues, and areas for improvement. Provide specific, actionable recommendations for enhancing the codebase.",
    "interactive_enhanced_query": "Based on the comprehensive code analysis provided, please answer the following question: {query}\n   Consider all aspects of the analysis, including code structure, quality, performance, security, and domain-specific insights. Provide a detailed and insightful answer, drawing from the analysis results and your general knowledge of software development best practices.",
    "adaptive_learning": "Based on the following user feedback, please suggest improvements to our code analysis process:\n  User Feedback: {feedback}\n    Consider how we can enhance our analysis techniques, refine our insights, or adjust our recommendations to better serve the user's needs. Provide specific suggestions for updating our analysis algorithms, knowledge base, or reporting methods."
}